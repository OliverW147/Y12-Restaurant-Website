The previous presentation detailed the development of a Python-based system for restaurant inventory and booking management. This presentation explores the iterative development of a restaurant’s web application, leveraging the preceding Python-based system to manage the web-app’s core functionality.
In order to effectively streamline customer interactions, the web-app must be user-friendly, visually appealing, and responsive.
Additionally, it must include booking, authentication, and inventory and order administration components.
A flowchart is utilized to structure the logic of the website. This flowchart outlines the process for handling inputs and outputs involved in navigating the web application. These processes include accepting login credentials and managing booking requests to redirect users between pages.
Additionally, scaffolding is employed to guide the markup of the website.
An alternating grid layout is selected for displaying the main content on the homepage. This layout, commonly found in similar applications, is visually appealing to a broad audience.
For user authentication, a standard login and registration form with two text boxes is utilized. To facilitate customer bookings, a form incorporating combo boxes, date-time pickers, and number steppers is implemented.
To develop the website, the widely-used Flask web framework is selected due to its compatibility with Python, the language used for the restaurant's inventory and booking management classes. Initially, a website directory is created following the structure depicted in this screenshot. This structure divides the website development into distinct increments. The first increment focuses on implementing basic functionalities such as authentication, booking, and inventory management systems. The second increment addresses bug fixing, and the third increment concentrates on markup and styling.
In the initial iteration, Flask and the backend from the previous presentation are imported into a Python file, app.py. All objects are initialized, and routes are created using HTML templates, enabling users to register an account and log in. Once logged in, users can book a table by providing their name, preferred table number, booking time, and by selecting meals. The booking process verifies table availability and ensures sufficient ingredients are in the inventory for the selected meals. Staff members have a separate login to access additional features. They can manage the restaurant's inventory by adding ingredients and viewing current stock levels, as well as viewing logs of ingredient usage over time. The staff dashboard provides links for easy access to these features.
In this initial iteration, the routes and views in Flask manage user interactions, with each route corresponding to a specific page or functionality. For instance, the login route handles rendering the login form (GET requests) and processing form data for authentication (POST requests). The /book route is responsible for handling table bookings, ensuring the user is logged in, and processing the booking form data.
HTML templates structure the pages and incorporate Flask-specific syntax for dynamic content rendering. For example, the ingredients interface dynamically generates a list based on the ingredients object. Flash messages provide user feedback, indicating outcomes such as successful or failed bookings. Backend objects, including Bookings, Inventory, Meals, Usages, and Accounts, are initialized with sample data and invoked throughout the routes to handle POST requests. The POST method in the inventory route, for instance, uses input from a form to add an ingredient to the inventory.
Additionally, Flask's sessions module is employed to manage authentication and increase security through signed cookies. In subsequent iterations, this module is also used to transmit session information in booking requests and improve data persistence.
After testing edge cases in the first iteration, including scenarios with blank inputs, several issues were identified for fixing in the second iteration.
One major problem is the absence of restrictions on booking times, allowing users to book tables outside the restaurant's operating hours and in irregular time slots. To address this, the booking page’s HTML file in the second iteration will include a dropdown menu with various hour-long time blocks.
The specific change made in the updated HTML file involves the use of an innovative JavaScript listener. This listener dynamically generates each hour within the restaurant's open and close hours, formats them as strings, and appends them as options to the new dropdown menu. The advantage of using a listener is that it allows for easy customization of the dropdown menu.
Additionally, in the first iteration, there are no methods called for the meals object, making it impossible for staff to update information about the meals. In this iteration, a new route is implemented, allowing staff to manage meals by adding or removing them from the menu. Another JavaScript listener dynamically handles adding new ingredient fields to the form.
Another issue identified is the allowance of any name for the booking, which could result in confusing and duplicate booking names. To resolve this, the booking process has been modified to use customers' session usernames as the booking names.
Additionally, successful actions are now displayed in green instead of red, and features have been added to enable staff to better modify bookings, inventory, and menu items. A function for staff to cancel bookings has also been introduced.
With testing and bug fixing complete, the website is now to be fully styled. In the third and final iteration, the CSS has been updated to feature a light background, updated font, and improved navigation and form styles, including enhanced table designs.
The homepage now aligns with the initial scaffold and contains a Bootstrap jumbotron for a more engaging introduction. It features larger, visually appealing navigation buttons and new sections for "About Us," "Our Menu," and "Contact Us," each with images and call-to-action buttons leading to three new routes.
Numerous additional features have been implemented to ensure the website is highly user-friendly. Buttons on the front page and in the navbar dynamically change depending on whether the user is logged in as a customer or a staff member. All pages now include the navbar and footer, the staff dashboard has been overhauled, placeholder text is more appropriately themed for a restaurant, and feedback messages are now displayed in a more formatted manner.
Overall, the restaurant booking and inventory management web application successfully achieves its goal of being user-friendly and visually appealing. The final application consists of approximately 1,000 lines of Python, HTML, and CSS, and includes functional authentication and booking pages, as well as a dashboard for staff to manage bookings, inventory, and meals.
All project files are accessible via the link on the screen, and this is the bibliography. Thank you for listening.
